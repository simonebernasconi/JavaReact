// Generated from antlr_grammars/Expression.g4 by ANTLR 4.1
package test.javareact.common.expressions.antlr_grammars;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class ExpressionLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__18=1, T__17=2, T__16=3, T__15=4, T__14=5, T__13=6, T__12=7, T__11=8, 
		T__10=9, T__9=10, T__8=11, T__7=12, T__6=13, T__5=14, T__4=15, T__3=16, 
		T__2=17, T__1=18, T__0=19, MUL=20, DIV=21, ADD=22, SUB=23, DOT=24, MIN=25, 
		MAX=26, NOT=27, EQUAL=28, AND=29, OR=30, AVG=31, SUM=32, ASC=33, DESC=34, 
		ALLTRUE=35, ALLFALSE=36, ID=37, STRING=38, DIGIT=39, DOUBLE=40, BOOL=41, 
		WS=42;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"']'", "':Bool'", "')'", "','", "'Constant('", "':ListString'", "'Size'", 
		"'['", "'('", "':Num'", "'get('", "':String'", "':ListInt'", "':ListDouble'", 
		"'Last'", "':ListBool'", "'contains'", "'size('", "'contains('", "'*'", 
		"'/'", "'+'", "'-'", "'.'", "'<'", "'>'", "'!'", "'=='", "'&'", "'|'", 
		"'Avg'", "'Sum'", "'orderAsc'", "'orderDesc'", "'isAllTrue'", "'isAllFalse'", 
		"ID", "STRING", "DIGIT", "DOUBLE", "BOOL", "WS"
	};
	public static final String[] ruleNames = {
		"T__18", "T__17", "T__16", "T__15", "T__14", "T__13", "T__12", "T__11", 
		"T__10", "T__9", "T__8", "T__7", "T__6", "T__5", "T__4", "T__3", "T__2", 
		"T__1", "T__0", "MUL", "DIV", "ADD", "SUB", "DOT", "MIN", "MAX", "NOT", 
		"EQUAL", "AND", "OR", "AVG", "SUM", "ASC", "DESC", "ALLTRUE", "ALLFALSE", 
		"ID", "STRING", "DIGIT", "DOUBLE", "BOOL", "WS"
	};


	public ExpressionLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Expression.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 41: WS_action((RuleContext)_localctx, actionIndex); break;
		}
	}
	private void WS_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: skip();  break;
		}
	}

	public static final String _serializedATN =
		"\3\uacf5\uee8c\u4f5d\u8b0d\u4a45\u78bd\u1b2f\u3378\2,\u014a\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\3"+
		"\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3"+
		"\b\3\b\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3"+
		"\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3"+
		"\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3"+
		"\17\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3"+
		"\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3"+
		"\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3"+
		"\25\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3"+
		"\34\3\35\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3 \3 \3!\3!\3!\3!\3\"\3\""+
		"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3$\3$\3$\3"+
		"$\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3&\3&\7&\u011b\n"+
		"&\f&\16&\u011e\13&\3\'\3\'\6\'\u0122\n\'\r\'\16\'\u0123\3\'\3\'\3(\6("+
		"\u0129\n(\r(\16(\u012a\3)\7)\u012e\n)\f)\16)\u0131\13)\3)\3)\6)\u0135"+
		"\n)\r)\16)\u0136\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0142\n*\3+\6+\u0145\n"+
		"+\r+\16+\u0146\3+\3+\2,\3\3\1\5\4\1\7\5\1\t\6\1\13\7\1\r\b\1\17\t\1\21"+
		"\n\1\23\13\1\25\f\1\27\r\1\31\16\1\33\17\1\35\20\1\37\21\1!\22\1#\23\1"+
		"%\24\1\'\25\1)\26\1+\27\1-\30\1/\31\1\61\32\1\63\33\1\65\34\1\67\35\1"+
		"9\36\1;\37\1= \1?!\1A\"\1C#\1E$\1G%\1I&\1K\'\1M(\1O)\1Q*\1S+\1U,\2\3\2"+
		"\7\3\2C\\\5\2\62;C\\c|\6\2\"\"\62;C\\c|\3\2\62;\4\2\13\f\"\"\u0150\2\3"+
		"\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2"+
		"\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31"+
		"\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2"+
		"\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2"+
		"\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2"+
		"\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2"+
		"I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3"+
		"\2\2\2\3W\3\2\2\2\5Y\3\2\2\2\7_\3\2\2\2\ta\3\2\2\2\13c\3\2\2\2\rm\3\2"+
		"\2\2\17y\3\2\2\2\21~\3\2\2\2\23\u0080\3\2\2\2\25\u0082\3\2\2\2\27\u0087"+
		"\3\2\2\2\31\u008c\3\2\2\2\33\u0094\3\2\2\2\35\u009d\3\2\2\2\37\u00a9\3"+
		"\2\2\2!\u00ae\3\2\2\2#\u00b8\3\2\2\2%\u00c1\3\2\2\2\'\u00c7\3\2\2\2)\u00d1"+
		"\3\2\2\2+\u00d3\3\2\2\2-\u00d5\3\2\2\2/\u00d7\3\2\2\2\61\u00d9\3\2\2\2"+
		"\63\u00db\3\2\2\2\65\u00dd\3\2\2\2\67\u00df\3\2\2\29\u00e1\3\2\2\2;\u00e4"+
		"\3\2\2\2=\u00e6\3\2\2\2?\u00e8\3\2\2\2A\u00ec\3\2\2\2C\u00f0\3\2\2\2E"+
		"\u00f9\3\2\2\2G\u0103\3\2\2\2I\u010d\3\2\2\2K\u0118\3\2\2\2M\u011f\3\2"+
		"\2\2O\u0128\3\2\2\2Q\u012f\3\2\2\2S\u0141\3\2\2\2U\u0144\3\2\2\2WX\7_"+
		"\2\2X\4\3\2\2\2YZ\7<\2\2Z[\7D\2\2[\\\7q\2\2\\]\7q\2\2]^\7n\2\2^\6\3\2"+
		"\2\2_`\7+\2\2`\b\3\2\2\2ab\7.\2\2b\n\3\2\2\2cd\7E\2\2de\7q\2\2ef\7p\2"+
		"\2fg\7u\2\2gh\7v\2\2hi\7c\2\2ij\7p\2\2jk\7v\2\2kl\7*\2\2l\f\3\2\2\2mn"+
		"\7<\2\2no\7N\2\2op\7k\2\2pq\7u\2\2qr\7v\2\2rs\7U\2\2st\7v\2\2tu\7t\2\2"+
		"uv\7k\2\2vw\7p\2\2wx\7i\2\2x\16\3\2\2\2yz\7U\2\2z{\7k\2\2{|\7|\2\2|}\7"+
		"g\2\2}\20\3\2\2\2~\177\7]\2\2\177\22\3\2\2\2\u0080\u0081\7*\2\2\u0081"+
		"\24\3\2\2\2\u0082\u0083\7<\2\2\u0083\u0084\7P\2\2\u0084\u0085\7w\2\2\u0085"+
		"\u0086\7o\2\2\u0086\26\3\2\2\2\u0087\u0088\7i\2\2\u0088\u0089\7g\2\2\u0089"+
		"\u008a\7v\2\2\u008a\u008b\7*\2\2\u008b\30\3\2\2\2\u008c\u008d\7<\2\2\u008d"+
		"\u008e\7U\2\2\u008e\u008f\7v\2\2\u008f\u0090\7t\2\2\u0090\u0091\7k\2\2"+
		"\u0091\u0092\7p\2\2\u0092\u0093\7i\2\2\u0093\32\3\2\2\2\u0094\u0095\7"+
		"<\2\2\u0095\u0096\7N\2\2\u0096\u0097\7k\2\2\u0097\u0098\7u\2\2\u0098\u0099"+
		"\7v\2\2\u0099\u009a\7K\2\2\u009a\u009b\7p\2\2\u009b\u009c\7v\2\2\u009c"+
		"\34\3\2\2\2\u009d\u009e\7<\2\2\u009e\u009f\7N\2\2\u009f\u00a0\7k\2\2\u00a0"+
		"\u00a1\7u\2\2\u00a1\u00a2\7v\2\2\u00a2\u00a3\7F\2\2\u00a3\u00a4\7q\2\2"+
		"\u00a4\u00a5\7w\2\2\u00a5\u00a6\7d\2\2\u00a6\u00a7\7n\2\2\u00a7\u00a8"+
		"\7g\2\2\u00a8\36\3\2\2\2\u00a9\u00aa\7N\2\2\u00aa\u00ab\7c\2\2\u00ab\u00ac"+
		"\7u\2\2\u00ac\u00ad\7v\2\2\u00ad \3\2\2\2\u00ae\u00af\7<\2\2\u00af\u00b0"+
		"\7N\2\2\u00b0\u00b1\7k\2\2\u00b1\u00b2\7u\2\2\u00b2\u00b3\7v\2\2\u00b3"+
		"\u00b4\7D\2\2\u00b4\u00b5\7q\2\2\u00b5\u00b6\7q\2\2\u00b6\u00b7\7n\2\2"+
		"\u00b7\"\3\2\2\2\u00b8\u00b9\7e\2\2\u00b9\u00ba\7q\2\2\u00ba\u00bb\7p"+
		"\2\2\u00bb\u00bc\7v\2\2\u00bc\u00bd\7c\2\2\u00bd\u00be\7k\2\2\u00be\u00bf"+
		"\7p\2\2\u00bf\u00c0\7u\2\2\u00c0$\3\2\2\2\u00c1\u00c2\7u\2\2\u00c2\u00c3"+
		"\7k\2\2\u00c3\u00c4\7|\2\2\u00c4\u00c5\7g\2\2\u00c5\u00c6\7*\2\2\u00c6"+
		"&\3\2\2\2\u00c7\u00c8\7e\2\2\u00c8\u00c9\7q\2\2\u00c9\u00ca\7p\2\2\u00ca"+
		"\u00cb\7v\2\2\u00cb\u00cc\7c\2\2\u00cc\u00cd\7k\2\2\u00cd\u00ce\7p\2\2"+
		"\u00ce\u00cf\7u\2\2\u00cf\u00d0\7*\2\2\u00d0(\3\2\2\2\u00d1\u00d2\7,\2"+
		"\2\u00d2*\3\2\2\2\u00d3\u00d4\7\61\2\2\u00d4,\3\2\2\2\u00d5\u00d6\7-\2"+
		"\2\u00d6.\3\2\2\2\u00d7\u00d8\7/\2\2\u00d8\60\3\2\2\2\u00d9\u00da\7\60"+
		"\2\2\u00da\62\3\2\2\2\u00db\u00dc\7>\2\2\u00dc\64\3\2\2\2\u00dd\u00de"+
		"\7@\2\2\u00de\66\3\2\2\2\u00df\u00e0\7#\2\2\u00e08\3\2\2\2\u00e1\u00e2"+
		"\7?\2\2\u00e2\u00e3\7?\2\2\u00e3:\3\2\2\2\u00e4\u00e5\7(\2\2\u00e5<\3"+
		"\2\2\2\u00e6\u00e7\7~\2\2\u00e7>\3\2\2\2\u00e8\u00e9\7C\2\2\u00e9\u00ea"+
		"\7x\2\2\u00ea\u00eb\7i\2\2\u00eb@\3\2\2\2\u00ec\u00ed\7U\2\2\u00ed\u00ee"+
		"\7w\2\2\u00ee\u00ef\7o\2\2\u00efB\3\2\2\2\u00f0\u00f1\7q\2\2\u00f1\u00f2"+
		"\7t\2\2\u00f2\u00f3\7f\2\2\u00f3\u00f4\7g\2\2\u00f4\u00f5\7t\2\2\u00f5"+
		"\u00f6\7C\2\2\u00f6\u00f7\7u\2\2\u00f7\u00f8\7e\2\2\u00f8D\3\2\2\2\u00f9"+
		"\u00fa\7q\2\2\u00fa\u00fb\7t\2\2\u00fb\u00fc\7f\2\2\u00fc\u00fd\7g\2\2"+
		"\u00fd\u00fe\7t\2\2\u00fe\u00ff\7F\2\2\u00ff\u0100\7g\2\2\u0100\u0101"+
		"\7u\2\2\u0101\u0102\7e\2\2\u0102F\3\2\2\2\u0103\u0104\7k\2\2\u0104\u0105"+
		"\7u\2\2\u0105\u0106\7C\2\2\u0106\u0107\7n\2\2\u0107\u0108\7n\2\2\u0108"+
		"\u0109\7V\2\2\u0109\u010a\7t\2\2\u010a\u010b\7w\2\2\u010b\u010c\7g\2\2"+
		"\u010cH\3\2\2\2\u010d\u010e\7k\2\2\u010e\u010f\7u\2\2\u010f\u0110\7C\2"+
		"\2\u0110\u0111\7n\2\2\u0111\u0112\7n\2\2\u0112\u0113\7H\2\2\u0113\u0114"+
		"\7c\2\2\u0114\u0115\7n\2\2\u0115\u0116\7u\2\2\u0116\u0117\7g\2\2\u0117"+
		"J\3\2\2\2\u0118\u011c\t\2\2\2\u0119\u011b\t\3\2\2\u011a\u0119\3\2\2\2"+
		"\u011b\u011e\3\2\2\2\u011c\u011a\3\2\2\2\u011c\u011d\3\2\2\2\u011dL\3"+
		"\2\2\2\u011e\u011c\3\2\2\2\u011f\u0121\7)\2\2\u0120\u0122\t\4\2\2\u0121"+
		"\u0120\3\2\2\2\u0122\u0123\3\2\2\2\u0123\u0121\3\2\2\2\u0123\u0124\3\2"+
		"\2\2\u0124\u0125\3\2\2\2\u0125\u0126\7)\2\2\u0126N\3\2\2\2\u0127\u0129"+
		"\t\5\2\2\u0128\u0127\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u0128\3\2\2\2\u012a"+
		"\u012b\3\2\2\2\u012bP\3\2\2\2\u012c\u012e\t\5\2\2\u012d\u012c\3\2\2\2"+
		"\u012e\u0131\3\2\2\2\u012f\u012d\3\2\2\2\u012f\u0130\3\2\2\2\u0130\u0132"+
		"\3\2\2\2\u0131\u012f\3\2\2\2\u0132\u0134\5\61\31\2\u0133\u0135\t\5\2\2"+
		"\u0134\u0133\3\2\2\2\u0135\u0136\3\2\2\2\u0136\u0134\3\2\2\2\u0136\u0137"+
		"\3\2\2\2\u0137R\3\2\2\2\u0138\u0139\7v\2\2\u0139\u013a\7t\2\2\u013a\u013b"+
		"\7w\2\2\u013b\u0142\7g\2\2\u013c\u013d\7h\2\2\u013d\u013e\7c\2\2\u013e"+
		"\u013f\7n\2\2\u013f\u0140\7u\2\2\u0140\u0142\7g\2\2\u0141\u0138\3\2\2"+
		"\2\u0141\u013c\3\2\2\2\u0142T\3\2\2\2\u0143\u0145\t\6\2\2\u0144\u0143"+
		"\3\2\2\2\u0145\u0146\3\2\2\2\u0146\u0144\3\2\2\2\u0146\u0147\3\2\2\2\u0147"+
		"\u0148\3\2\2\2\u0148\u0149\b+\2\2\u0149V\3\2\2\2\n\2\u011c\u0123\u012a"+
		"\u012f\u0136\u0141\u0146";
	public static final ATN _ATN =
		ATNSimulator.deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}